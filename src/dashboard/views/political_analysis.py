"""
P√°gina de An√°lise Pol√≠tica do Dashboard digiNEV
An√°lise de categoriza√ß√£o e orienta√ß√£o pol√≠tica do discurso
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from typing import Optional

def render_political_page(data_loader):
    """Renderiza a p√°gina de an√°lise pol√≠tica"""
    
    st.markdown('<div class="page-header"><h2>üèõÔ∏è An√°lise Pol√≠tica</h2></div>', unsafe_allow_html=True)
    
    if not data_loader:
        st.error("Sistema de dados n√£o dispon√≠vel")
        return
    
    # Carregar dados pol√≠ticos
    political_data = data_loader.load_data('political_analysis')
    
    if political_data is None:
        st.warning("üìä Dados de an√°lise pol√≠tica n√£o dispon√≠veis")
        st.info("Execute o pipeline principal para gerar a an√°lise pol√≠tica (Stage 05)")
        return
    
    # Filtros interativos
    st.subheader("üîç Filtros de An√°lise")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Filtro por categoria pol√≠tica
        if 'political_category' in political_data.columns:
            categories = ['Todas'] + list(political_data['political_category'].unique())
            selected_category = st.selectbox("Categoria Pol√≠tica", categories)
        else:
            selected_category = 'Todas'
    
    with col2:
        # Filtro por orienta√ß√£o
        if 'political_orientation' in political_data.columns:
            orientations = ['Todas'] + list(political_data['political_orientation'].unique())
            selected_orientation = st.selectbox("Orienta√ß√£o Pol√≠tica", orientations)
        else:
            selected_orientation = 'Todas'
    
    with col3:
        # Filtro por per√≠odo
        if 'date' in political_data.columns or 'timestamp' in political_data.columns:
            date_col = 'date' if 'date' in political_data.columns else 'timestamp'
            try:
                political_data[date_col] = pd.to_datetime(political_data[date_col])
                date_range = st.date_input(
                    "Per√≠odo de An√°lise",
                    value=(political_data[date_col].min(), political_data[date_col].max()),
                    min_value=political_data[date_col].min(),
                    max_value=political_data[date_col].max()
                )
            except:
                date_range = None
        else:
            date_range = None
    
    # Aplicar filtros
    filtered_data = political_data.copy()
    
    if selected_category != 'Todas' and 'political_category' in filtered_data.columns:
        filtered_data = filtered_data[filtered_data['political_category'] == selected_category]
    
    if selected_orientation != 'Todas' and 'political_orientation' in filtered_data.columns:
        filtered_data = filtered_data[filtered_data['political_orientation'] == selected_orientation]
    
    if date_range and len(date_range) == 2:
        date_col = 'date' if 'date' in filtered_data.columns else 'timestamp'
        if date_col in filtered_data.columns:
            filtered_data = filtered_data[
                (filtered_data[date_col].dt.date >= date_range[0]) &
                (filtered_data[date_col].dt.date <= date_range[1])
            ]
    
    # M√©tricas principais
    st.subheader("üìä M√©tricas Pol√≠ticas")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_messages = len(filtered_data)
        st.metric("Total de Mensagens", f"{total_messages:,}")
    
    with col2:
        if 'political_category' in filtered_data.columns:
            categories_count = filtered_data['political_category'].nunique()
            st.metric("Categorias Identificadas", categories_count)
        else:
            st.metric("Categorias", "N/A")
    
    with col3:
        if 'political_intensity' in filtered_data.columns:
            avg_intensity = filtered_data['political_intensity'].mean()
            st.metric("Intensidade M√©dia", f"{avg_intensity:.2f}")
        else:
            st.metric("Intensidade", "N/A")
    
    with col4:
        if 'confidence_score' in filtered_data.columns:
            avg_confidence = filtered_data['confidence_score'].mean()
            st.metric("Confian√ßa M√©dia", f"{avg_confidence:.2f}")
        else:
            st.metric("Confian√ßa", "N/A")
    
    # Visualiza√ß√µes principais
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Distribui√ß√£o por Categoria Pol√≠tica")
        
        if 'political_category' in filtered_data.columns:
            category_counts = filtered_data['political_category'].value_counts()
            
            fig_categories = go.Figure()
            fig_categories.add_trace(go.Pie(
                labels=category_counts.index,
                values=category_counts.values,
                hole=0.3,
                textinfo='label+percent+value',
                hovertemplate='<b>%{label}</b><br>Mensagens: %{value}<br>Porcentagem: %{percent}<extra></extra>'
            ))
            
            fig_categories.update_layout(
                title="Distribui√ß√£o de Categorias Pol√≠ticas",
                height=400
            )
            
            st.plotly_chart(fig_categories, use_container_width=True)
        else:
            st.info("Dados de categoria pol√≠tica n√£o dispon√≠veis")
    
    with col2:
        st.subheader("üéØ Orienta√ß√£o Pol√≠tica")
        
        if 'political_orientation' in filtered_data.columns:
            orientation_counts = filtered_data['political_orientation'].value_counts()
            
            fig_orientation = go.Figure()
            fig_orientation.add_trace(go.Bar(
                x=orientation_counts.index,
                y=orientation_counts.values,
                marker_color=['#ff4444', '#4444ff', '#44ff44', '#ffff44'][:len(orientation_counts)],
                text=orientation_counts.values,
                textposition='auto'
            ))
            
            fig_orientation.update_layout(
                title="Distribui√ß√£o por Orienta√ß√£o Pol√≠tica",
                xaxis_title="Orienta√ß√£o",
                yaxis_title="N√∫mero de Mensagens",
                height=400
            )
            
            st.plotly_chart(fig_orientation, use_container_width=True)
        else:
            st.info("Dados de orienta√ß√£o pol√≠tica n√£o dispon√≠veis")
    
    # An√°lise temporal
    if date_range and 'date' in filtered_data.columns or 'timestamp' in filtered_data.columns:
        st.subheader("‚è±Ô∏è Evolu√ß√£o Temporal do Discurso Pol√≠tico")
        
        date_col = 'date' if 'date' in filtered_data.columns else 'timestamp'
        
        # Agrupar por per√≠odo
        period = st.selectbox("Per√≠odo de Agrupamento", ["Di√°rio", "Semanal", "Mensal"], index=1)
        
        if period == "Di√°rio":
            freq = 'D'
        elif period == "Semanal":
            freq = 'W'
        else:
            freq = 'M'
        
        temporal_data = filtered_data.groupby([
            filtered_data[date_col].dt.to_period(freq),
            'political_category' if 'political_category' in filtered_data.columns else None
        ]).size().reset_index(name='count')
        
        if 'political_category' in filtered_data.columns:
            fig_temporal = px.line(
                temporal_data,
                x=date_col,
                y='count',
                color='political_category',
                title=f"Evolu√ß√£o {period} do Discurso por Categoria",
                labels={'count': 'N√∫mero de Mensagens', date_col: 'Per√≠odo'}
            )
        else:
            fig_temporal = px.line(
                temporal_data,
                x=date_col,
                y='count',
                title=f"Evolu√ß√£o {period} do Discurso Pol√≠tico",
                labels={'count': 'N√∫mero de Mensagens', date_col: 'Per√≠odo'}
            )
        
        fig_temporal.update_layout(height=400)
        st.plotly_chart(fig_temporal, use_container_width=True)
    
    # An√°lise de intensidade
    if 'political_intensity' in filtered_data.columns:
        st.subheader("üî• An√°lise de Intensidade Pol√≠tica")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Histograma de intensidade
            fig_intensity = px.histogram(
                filtered_data,
                x='political_intensity',
                nbins=20,
                title="Distribui√ß√£o de Intensidade Pol√≠tica",
                labels={'political_intensity': 'Intensidade', 'count': 'Frequ√™ncia'}
            )
            
            fig_intensity.update_layout(height=300)
            st.plotly_chart(fig_intensity, use_container_width=True)
        
        with col2:
            # Box plot por categoria
            if 'political_category' in filtered_data.columns:
                fig_intensity_cat = px.box(
                    filtered_data,
                    x='political_category',
                    y='political_intensity',
                    title="Intensidade por Categoria Pol√≠tica"
                )
                
                fig_intensity_cat.update_layout(height=300)
                st.plotly_chart(fig_intensity_cat, use_container_width=True)
            else:
                st.info("An√°lise por categoria n√£o dispon√≠vel")
    
    # Tabela detalhada
    st.subheader("üìã Dados Detalhados")
    
    # Configurar colunas para exibi√ß√£o
    display_columns = []
    for col in ['text', 'political_category', 'political_orientation', 'political_intensity', 'confidence_score', 'date', 'timestamp']:
        if col in filtered_data.columns:
            display_columns.append(col)
    
    if display_columns:
        # Op√ß√µes de exibi√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            show_rows = st.selectbox("N√∫mero de linhas", [10, 25, 50, 100], index=1)
        
        with col2:
            sort_column = st.selectbox("Ordenar por", display_columns)
        
        # Exibir tabela
        display_data = filtered_data[display_columns].head(show_rows)
        
        if sort_column in display_data.columns:
            display_data = display_data.sort_values(sort_column, ascending=False)
        
        st.dataframe(display_data, use_container_width=True)
        
        # Op√ß√µes de exporta√ß√£o
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üì• Exportar CSV"):
                export_path = data_loader.export_data('political_analysis', 'csv')
                if export_path:
                    st.success(f"Dados exportados para: {export_path.name}")
        
        with col2:
            if st.button("üìä Exportar Excel"):
                export_path = data_loader.export_data('political_analysis', 'excel')
                if export_path:
                    st.success(f"Dados exportados para: {export_path.name}")
        
        with col3:
            if st.button("üîÑ Atualizar Dados"):
                data_loader.clear_cache()
                st.rerun()
    
    else:
        st.warning("Nenhuma coluna dispon√≠vel para exibi√ß√£o")
    
    # Insights e estat√≠sticas
    st.subheader("üí° Insights da An√°lise Pol√≠tica")
    
    insights = []
    
    if 'political_category' in filtered_data.columns:
        dominant_category = filtered_data['political_category'].mode().iloc[0]
        category_percentage = (filtered_data['political_category'].value_counts().iloc[0] / len(filtered_data)) * 100
        insights.append(f"‚Ä¢ **Categoria Dominante**: {dominant_category} ({category_percentage:.1f}% das mensagens)")
    
    if 'political_intensity' in filtered_data.columns:
        high_intensity = (filtered_data['political_intensity'] > filtered_data['political_intensity'].quantile(0.75)).sum()
        intensity_percentage = (high_intensity / len(filtered_data)) * 100
        insights.append(f"‚Ä¢ **Alta Intensidade**: {intensity_percentage:.1f}% das mensagens t√™m intensidade pol√≠tica elevada")
    
    if 'confidence_score' in filtered_data.columns:
        high_confidence = (filtered_data['confidence_score'] > 0.8).sum()
        confidence_percentage = (high_confidence / len(filtered_data)) * 100
        insights.append(f"‚Ä¢ **Alta Confian√ßa**: {confidence_percentage:.1f}% das classifica√ß√µes t√™m alta confian√ßa (>0.8)")
    
    if insights:
        for insight in insights:
            st.markdown(insight)
    else:
        st.info("Execute an√°lise pol√≠tica completa para gerar insights autom√°ticos")